import React, { useState } from 'react'
import { useFirebaseAuth } from '../../hooks/useFirebaseAuth'
import { Card } from '../ui/Card'
import { AuthHeader } from './AuthHeader'
import { SignInForm } from './SignInForm'
import { SignUpForm } from './SignUpForm'
import { ResetPasswordForm } from './ResetPasswordForm'
import { UIDLoginForm } from './UIDLoginForm'
import { AuthModeSwitch } from './AuthModeSwitch'
import { AuthFooter } from './AuthFooter'
import { FirebaseConfigChecker } from './FirebaseConfigChecker'
import { useAuthForm } from './useAuthForm'

interface AuthFormProps {
  onSuccess?: () => void
}

export function AuthForm({ onSuccess }: AuthFormProps) {
  const [mode, setMode] = useState<'signin' | 'signup' | 'reset' | 'uid'>('signin')
  const { signIn, signUp, resetPassword, signInWithUID, loading, error, isFirebaseEnabled } = useFirebaseAuth()
  const { formData, errors, validateForm, resetForm, updateField } = useAuthForm()

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ Firebase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
  if (!isFirebaseEnabled) {
    return (
      <div className="min-h-screen bg-slate-50 dark:bg-slate-900 flex items-center justify-center p-4">
        <div className="w-full max-w-2xl">
          <div className="text-center mb-6">
            <div className="w-16 h-16 bg-gradient-to-br from-red-600 to-red-700 rounded-2xl flex items-center justify-center mx-auto mb-4">
              <span className="text-2xl text-white">üî•</span>
            </div>
            <h1 className="text-2xl font-bold text-slate-900 dark:text-slate-100 mb-2">
              –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ Firebase
            </h1>
            <p className="text-slate-600 dark:text-slate-400">
              –î–ª—è —Ä–∞–±–æ—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Firebase
            </p>
          </div>
          
          <FirebaseConfigChecker />
          
          <div className="mt-6 text-center">
            <p className="text-sm text-slate-500 dark:text-slate-400">
              –ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Firebase –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            </p>
          </div>
        </div>
      </div>
    );
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!validateForm(mode)) return

    try {
      let result
      
      if (mode === 'signin') {
        // –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ Firebase –¥–ª—è –≤—Ö–æ–¥–∞
        result = await signIn(formData.email, formData.password)
      } else if (mode === 'signup') {
        // –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ Firebase –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        result = await signUp(formData.email, formData.password, formData.fullName)
        if (!result.error) {
          alert('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!')
          return
        }
      } else if (mode === 'uid') {
        // –ö–∞—Å—Ç–æ–º–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        result = await signInWithUID(formData.uid)
        if (!result.error) {
          alert('–í—Ö–æ–¥ –ø–æ UID —É—Å–ø–µ—à–µ–Ω!')
          return
        }
      } else {
        // –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ Firebase
        result = await resetPassword(formData.email)
        if (!result.error) {
          alert('–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à email')
          setMode('signin')
          return
        }
      }

      if (result && !result.error && onSuccess) {
        onSuccess()
      }
    } catch (err) {
      console.error('Auth error:', err)
    }
  }

  const switchMode = (newMode: 'signin' | 'signup' | 'reset' | 'uid') => {
    setMode(newMode)
    resetForm()
  }

  const renderForm = () => {
    switch (mode) {
      case 'signin':
        return <SignInForm formData={formData} errors={errors} updateField={updateField} />
      case 'signup':
        return <SignUpForm formData={formData} errors={errors} updateField={updateField} />
      case 'reset':
        return <ResetPasswordForm formData={formData} errors={errors} updateField={updateField} />
      case 'uid':
        return <UIDLoginForm formData={formData} errors={errors} updateField={updateField} />
      default:
        return <SignInForm formData={formData} errors={errors} updateField={updateField} />
    }
  }

  return (
    <div className="min-h-screen bg-slate-50 dark:bg-slate-900 flex items-center justify-center p-4">
      <Card className="w-full max-w-md" variant="elevated">
        <AuthHeader mode={mode} />

        <form onSubmit={handleSubmit} className="space-y-4">
          {renderForm()}

          {/* –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Firebase */}
          {error && (
            <div className="p-3 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-xl">
              <div className="flex items-start gap-2">
                <div className="w-2 h-2 bg-red-500 rounded-full mt-2 flex-shrink-0"></div>
                <div>
                  <p className="text-sm font-medium text-red-800 dark:text-red-200">
                    –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                  </p>
                  <p className="text-sm text-red-600 dark:text-red-400 mt-1">
                    {error}
                  </p>
                  {error.includes('api-key-not-valid') && (
                    <div className="mt-3 p-2 bg-red-100 dark:bg-red-900/30 rounded-lg">
                      <p className="text-xs text-red-700 dark:text-red-300 font-medium">
                        üîë –ü—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–æ–º Firebase:
                      </p>
                      <ul className="text-xs text-red-600 dark:text-red-400 mt-1 space-y-1">
                        <li>‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å VITE_FIREBASE_API_KEY –≤ .env</li>
                        <li>‚Ä¢ API –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å "AIzaSy"</li>
                        <li>‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∫–ª—é—á –∏–∑ Firebase Console</li>
                        <li>‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è .env</li>
                      </ul>
                    </div>
                  )}
                  {error.includes('—Å–µ—Ç–∏') && (
                    <p className="text-xs text-red-500 dark:text-red-400 mt-2">
                      üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞
                    </p>
                  )}
                  {error.includes('—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ') && (
                    <p className="text-xs text-red-500 dark:text-red-400 mt-2">
                      ‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    </p>
                  )}
                </div>
              </div>
            </div>
          )}

          <AuthModeSwitch mode={mode} loading={loading} />
        </form>

        <AuthFooter mode={mode} onSwitchMode={switchMode} />
      </Card>
    </div>
  )
}
