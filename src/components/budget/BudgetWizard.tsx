import React, { useState } from 'react';
import { Wand2, Calculator, Target, TrendingUp, ArrowRight, ArrowLeft } from 'lucide-react';
import { useApp } from '../../contexts/AppContext';
import { Card } from '../ui/Card';
import { Button } from '../ui/Button';
import { Input } from '../ui/Input';
import { Budget } from '../../types';

interface BudgetTemplate {
  id: string;
  name: string;
  description: string;
  icon: string;
  percentages: {
    needs: number;
    wants: number;
    savings: number;
  };
  categories: {
    needs: string[];
    wants: string[];
    savings: string[];
  };
}

const BUDGET_TEMPLATES: BudgetTemplate[] = [
  {
    id: '50-30-20',
    name: '50/30/20 –ü—Ä–∞–≤–∏–ª–æ',
    description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ: 50% –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏, 30% –∂–µ–ª–∞–Ω–∏—è, 20% —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è',
    icon: 'üìä',
    percentages: { needs: 50, wants: 30, savings: 20 },
    categories: {
      needs: ['–ü—Ä–æ–¥—É–∫—Ç—ã', '–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏', '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–ó–¥–æ—Ä–æ–≤—å–µ'],
      wants: ['–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã', '–®–æ–ø–∏–Ω–≥', '–•–æ–±–±–∏'],
      savings: ['–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è', '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π —Ñ–æ–Ω–¥']
    }
  },
  {
    id: '60-20-20',
    name: '60/20/20 –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π',
    description: '–ë–æ–ª—å—à–µ –Ω–∞ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏, –º–µ–Ω—å—à–µ –Ω–∞ –∂–µ–ª–∞–Ω–∏—è',
    icon: 'üõ°Ô∏è',
    percentages: { needs: 60, wants: 20, savings: 20 },
    categories: {
      needs: ['–ü—Ä–æ–¥—É–∫—Ç—ã', '–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏', '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', '–ó–¥–æ—Ä–æ–≤—å–µ', '–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ'],
      wants: ['–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã'],
      savings: ['–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è', '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏']
    }
  },
  {
    id: '40-40-20',
    name: '40/40/20 –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π',
    description: '–†–∞–≤–Ω–æ–≤–µ—Å–∏–µ –º–µ–∂–¥—É –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º–∏ –∏ –∂–µ–ª–∞–Ω–∏—è–º–∏',
    icon: '‚öñÔ∏è',
    percentages: { needs: 40, wants: 40, savings: 20 },
    categories: {
      needs: ['–ü—Ä–æ–¥—É–∫—Ç—ã', '–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏', '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç'],
      wants: ['–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '–†–µ—Å—Ç–æ—Ä–∞–Ω—ã', '–®–æ–ø–∏–Ω–≥', '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è'],
      savings: ['–ù–∞–∫–æ–ø–ª–µ–Ω–∏—è', '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏']
    }
  },
  {
    id: 'custom',
    name: '–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π',
    description: '–°–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏',
    icon: 'üéõÔ∏è',
    percentages: { needs: 50, wants: 30, savings: 20 },
    categories: {
      needs: [],
      wants: [],
      savings: []
    }
  }
];

interface BudgetWizardProps {
  onComplete: (budgets: Omit<Budget, 'id'>[]) => void;
  onClose: () => void;
}

export function BudgetWizard({ onComplete, onClose }: BudgetWizardProps) {
  const { state } = useApp();
  const [step, setStep] = useState(1);
  const [monthlyIncome, setMonthlyIncome] = useState('');
  const [selectedTemplate, setSelectedTemplate] = useState<BudgetTemplate>(BUDGET_TEMPLATES[0]);
  const [customPercentages, setCustomPercentages] = useState({
    needs: 50,
    wants: 30,
    savings: 20
  });
  const [categoryAssignments, setCategoryAssignments] = useState<{
    [categoryId: string]: 'needs' | 'wants' | 'savings'
  }>({});

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('ru-RU', {
      style: 'currency',
      currency: 'RUB',
      maximumFractionDigits: 0,
    }).format(amount);
  };

  const calculateAmounts = () => {
    const income = parseFloat(monthlyIncome) || 0;
    const percentages = selectedTemplate.id === 'custom' ? customPercentages : selectedTemplate.percentages;
    
    return {
      needs: (income * percentages.needs) / 100,
      wants: (income * percentages.wants) / 100,
      savings: (income * percentages.savings) / 100,
      total: income
    };
  };

  const getSmartRecommendations = () => {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const lastMonthTransactions = state.transactions.filter(t => {
      const transactionDate = new Date(t.date);
      const lastMonth = new Date();
      lastMonth.setMonth(lastMonth.getMonth() - 1);
      return transactionDate >= lastMonth && t.type === 'expense';
    });

    const categoryTotals = lastMonthTransactions.reduce((acc, t) => {
      acc[t.category] = (acc[t.category] || 0) + t.amount;
      return acc;
    }, {} as Record<string, number>);

    const totalSpent = Object.values(categoryTotals).reduce((sum, amount) => sum + amount, 0);

    // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –¥–æ—Ö–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞—Ç + 20% –±—É—Ñ–µ—Ä
    const recommendedIncome = Math.ceil(totalSpent * 1.2 / 1000) * 1000;

    return {
      recommendedIncome,
      categoryTotals,
      totalSpent
    };
  };

  const handleTemplateSelect = (template: BudgetTemplate) => {
    setSelectedTemplate(template);
    if (template.id === 'custom') {
      setCustomPercentages({ needs: 50, wants: 30, savings: 20 });
    }
  };

  const handleCustomPercentageChange = (type: keyof typeof customPercentages, value: number) => {
    const newPercentages = { ...customPercentages, [type]: value };
    const total = Object.values(newPercentages).reduce((sum, val) => sum + val, 0);
    
    if (total <= 100) {
      setCustomPercentages(newPercentages);
    }
  };

  const assignCategoryToGroup = (categoryId: string, group: 'needs' | 'wants' | 'savings') => {
    setCategoryAssignments(prev => ({
      ...prev,
      [categoryId]: group
    }));
  };

  const generateBudgets = () => {
    const amounts = calculateAmounts();
    const percentages = selectedTemplate.id === 'custom' ? customPercentages : selectedTemplate.percentages;
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const groupedCategories = {
      needs: [] as string[],
      wants: [] as string[],
      savings: [] as string[]
    };

    state.categories.forEach(category => {
      if (category.type === 'expense') {
        const assignment = categoryAssignments[category.id];
        if (assignment) {
          groupedCategories[assignment].push(category.id);
        }
      }
    });

    // –°–æ–∑–¥–∞—ë–º –±—é–¥–∂–µ—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const budgets: Omit<Budget, 'id'>[] = [];

    Object.entries(groupedCategories).forEach(([group, categoryIds]) => {
      const groupAmount = amounts[group as keyof typeof amounts];
      const amountPerCategory = categoryIds.length > 0 ? groupAmount / categoryIds.length : 0;

      categoryIds.forEach(categoryId => {
        budgets.push({
          categoryId,
          amount: amountPerCategory,
          period: 'monthly' as const,
          spent: 0,
          remaining: amountPerCategory,
          group,
          percentage: percentages[group as keyof typeof percentages]
        });
      });
    });

    return budgets;
  };

  const handleComplete = () => {
    try {
      const budgets = generateBudgets();
      console.log('Generated budgets:', budgets);
      
      if (budgets.length === 0) {
        alert('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—é–¥–∂–µ—Ç–∞');
        return;
      }
      
      onComplete(budgets);
    } catch (error) {
      console.error('Error creating budgets:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—é–¥–∂–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  };

  const recommendations = getSmartRecommendations();
  const amounts = calculateAmounts();
  const totalPercentage = selectedTemplate.id === 'custom' 
    ? Object.values(customPercentages).reduce((sum, val) => sum + val, 0)
    : 100;

  const expenseCategories = state.categories.filter(c => c.type === 'expense');

  return (
    <div className="space-y-6">
      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center gap-2">
          <Wand2 className="text-blue-600 dark:text-blue-400" size={20} />
          <h2 className="text-xl font-bold text-slate-900 dark:text-slate-100">
            –ú–∞—Å—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—é–¥–∂–µ—Ç–∞
          </h2>
        </div>
        <div className="text-sm text-slate-500 dark:text-slate-400">
          –®–∞–≥ {step} –∏–∑ 3
        </div>
      </div>

      <div className="flex gap-2 mb-6">
        {[1, 2, 3].map(stepNumber => (
          <div
            key={stepNumber}
            className={`flex-1 h-2 rounded-full transition-all duration-300 ${
              stepNumber <= step 
                ? 'bg-blue-600' 
                : 'bg-slate-200 dark:bg-slate-700'
            }`}
          />
        ))}
      </div>

      {/* –®–∞–≥ 1: –î–æ—Ö–æ–¥ */}
      {step === 1 && (
        <Card>
          <div className="space-y-6">
            <div className="text-center">
              <Calculator className="mx-auto text-blue-600 dark:text-blue-400 mb-4" size={48} />
              <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100 mb-2">
                –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –º–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥
              </h3>
              <p className="text-slate-500 dark:text-slate-400">
                –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
              </p>
            </div>

            {recommendations.totalSpent > 0 && (
              <div className="p-4 bg-blue-50 dark:bg-blue-900/20 rounded-xl">
                <div className="flex items-center gap-2 mb-2">
                  <TrendingUp className="text-blue-600 dark:text-blue-400" size={16} />
                  <span className="font-medium text-blue-800 dark:text-blue-200">
                    –£–º–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
                  </span>
                </div>
                <p className="text-sm text-blue-700 dark:text-blue-300 mb-3">
                  –ù–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö —Ç—Ä–∞—Ç –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü ({formatCurrency(recommendations.totalSpent)}) 
                  —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –¥–æ—Ö–æ–¥: <strong>{formatCurrency(recommendations.recommendedIncome)}</strong>
                </p>
                <Button
                  variant="secondary"
                  size="sm"
                  onClick={() => setMonthlyIncome(recommendations.recommendedIncome.toString())}
                >
                  –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
                </Button>
              </div>
            )}

            <div className="max-w-md mx-auto">
              <Input
                label="–ú–µ—Å—è—á–Ω—ã–π –¥–æ—Ö–æ–¥ –ø–æ—Å–ª–µ –Ω–∞–ª–æ–≥–æ–≤"
                type="number"
                value={monthlyIncome}
                onChange={(e) => setMonthlyIncome(e.target.value)}
                placeholder="100000"
                fullWidth
              />
            </div>

            <div className="flex justify-end">
              <Button
                onClick={() => setStep(2)}
                disabled={!monthlyIncome || parseFloat(monthlyIncome) <= 0}
              >
                –î–∞–ª–µ–µ <ArrowRight size={16} className="ml-2" />
              </Button>
            </div>
          </div>
        </Card>
      )}

      {/* –®–∞–≥ 2: –í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ */}
      {step === 2 && (
        <Card>
          <div className="space-y-6">
            <div className="text-center">
              <Target className="mx-auto text-blue-600 dark:text-blue-400 mb-4" size={48} />
              <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100 mb-2">
                –í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –±—é–¥–∂–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
              </h3>
              <p className="text-slate-500 dark:text-slate-400">
                –ú—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –Ω–∞—á–∞—Ç—å —Å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
              </p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {BUDGET_TEMPLATES.map(template => (
                <button
                  key={template.id}
                  onClick={() => handleTemplateSelect(template)}
                  className={`p-4 rounded-xl border-2 transition-all duration-200 text-left ${
                    selectedTemplate.id === template.id
                      ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                      : 'border-slate-200 dark:border-slate-700 hover:border-slate-300 dark:hover:border-slate-600'
                  }`}
                >
                  <div className="flex items-center gap-3 mb-2">
                    <span className="text-2xl">{template.icon}</span>
                    <h4 className="font-semibold text-slate-900 dark:text-slate-100">
                      {template.name}
                    </h4>
                  </div>
                  <p className="text-sm text-slate-600 dark:text-slate-400 mb-3">
                    {template.description}
                  </p>
                  <div className="flex gap-2 text-xs">
                    <span className="px-2 py-1 bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200 rounded">
                      {template.percentages.needs}% –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
                    </span>
                    <span className="px-2 py-1 bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200 rounded">
                      {template.percentages.wants}% –∂–µ–ª–∞–Ω–∏—è
                    </span>
                    <span className="px-2 py-1 bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-200 rounded">
                      {template.percentages.savings}% —Å–±–µ—Ä–µ–∂–µ–Ω–∏—è
                    </span>
                  </div>
                </button>
              ))}
            </div>

            {selectedTemplate.id === 'custom' && (
              <div className="p-4 bg-slate-50 dark:bg-slate-800 rounded-xl">
                <h4 className="font-semibold text-slate-900 dark:text-slate-100 mb-4">
                  –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
                </h4>
                <div className="grid grid-cols-3 gap-4 mb-4">
                  <div>
                    <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
                      –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ (%)
                    </label>
                    <Input
                      type="number"
                      min="0"
                      max="100"
                      value={customPercentages.needs}
                      onChange={(e) => handleCustomPercentageChange('needs', parseInt(e.target.value) || 0)}
                      fullWidth
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
                      –ñ–µ–ª–∞–Ω–∏—è (%)
                    </label>
                    <Input
                      type="number"
                      min="0"
                      max="100"
                      value={customPercentages.wants}
                      onChange={(e) => handleCustomPercentageChange('wants', parseInt(e.target.value) || 0)}
                      fullWidth
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
                      –°–±–µ—Ä–µ–∂–µ–Ω–∏—è (%)
                    </label>
                    <Input
                      type="number"
                      min="0"
                      max="100"
                      value={customPercentages.savings}
                      onChange={(e) => handleCustomPercentageChange('savings', parseInt(e.target.value) || 0)}
                      fullWidth
                    />
                  </div>
                </div>
                <div className={`text-sm ${
                  totalPercentage === 100 
                    ? 'text-green-600 dark:text-green-400' 
                    : 'text-red-600 dark:text-red-400'
                }`}>
                  –ò—Ç–æ–≥–æ: {totalPercentage}% {totalPercentage !== 100 && '(–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 100%)'}
                </div>
              </div>
            )}

            {monthlyIncome && (
              <div className="p-4 bg-blue-50 dark:bg-blue-900/20 rounded-xl">
                <h4 className="font-semibold text-blue-800 dark:text-blue-200 mb-3">
                  –†–∞—Å—á—ë—Ç –±—é–¥–∂–µ—Ç–∞
                </h4>
                <div className="grid grid-cols-3 gap-4 text-sm">
                  <div>
                    <div className="text-green-700 dark:text-green-300 font-medium">–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏</div>
                    <div className="text-lg font-bold text-green-800 dark:text-green-200">
                      {formatCurrency(amounts.needs)}
                    </div>
                  </div>
                  <div>
                    <div className="text-blue-700 dark:text-blue-300 font-medium">–ñ–µ–ª–∞–Ω–∏—è</div>
                    <div className="text-lg font-bold text-blue-800 dark:text-blue-200">
                      {formatCurrency(amounts.wants)}
                    </div>
                  </div>
                  <div>
                    <div className="text-purple-700 dark:text-purple-300 font-medium">–°–±–µ—Ä–µ–∂–µ–Ω–∏—è</div>
                    <div className="text-lg font-bold text-purple-800 dark:text-purple-200">
                      {formatCurrency(amounts.savings)}
                    </div>
                  </div>
                </div>
              </div>
            )}

            <div className="flex justify-between">
              <Button variant="secondary" onClick={() => setStep(1)}>
                <ArrowLeft size={16} className="mr-2" /> –ù–∞–∑–∞–¥
              </Button>
              <Button
                onClick={() => setStep(3)}
                disabled={selectedTemplate.id === 'custom' && totalPercentage !== 100}
              >
                –î–∞–ª–µ–µ <ArrowRight size={16} className="ml-2" />
              </Button>
            </div>
          </div>
        </Card>
      )}

      {/* –®–∞–≥ 3: –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
      {step === 3 && (
        <Card>
          <div className="space-y-6">
            <div className="text-center">
              <div className="text-4xl mb-4">üè∑Ô∏è</div>
              <h3 className="text-lg font-semibold text-slate-900 dark:text-slate-100 mb-2">
                –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –≥—Ä—É–ø–ø–∞–º
              </h3>
              <p className="text-slate-500 dark:text-slate-400">
                –ù–∞–∑–Ω–∞—á—å—Ç–µ –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É
              </p>
            </div>

            {expenseCategories.length === 0 && (
              <div className="p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-xl">
                <p className="text-yellow-800 dark:text-yellow-200">
                  –£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏" –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π –±—é–¥–∂–µ—Ç–∞.
                </p>
              </div>
            )}

            {expenseCategories.length > 0 && (
              <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
                {/* –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ */}
                <div className="p-4 bg-green-50 dark:bg-green-900/20 rounded-xl">
                  <h4 className="font-semibold text-green-800 dark:text-green-200 mb-3 flex items-center gap-2">
                    <span>üè†</span> –ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ ({formatCurrency(amounts.needs)})
                  </h4>
                  <p className="text-sm text-green-700 dark:text-green-300 mb-4">
                    –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã –¥–ª—è –∂–∏–∑–Ω–∏
                  </p>
                  <div className="space-y-2">
                    {expenseCategories.map(category => (
                      <label key={`needs-${category.id}`} className="flex items-center gap-2 cursor-pointer">
                        <input
                          type="radio"
                          name={`category-${category.id}`}
                          checked={categoryAssignments[category.id] === 'needs'}
                          onChange={() => assignCategoryToGroup(category.id, 'needs')}
                          className="text-green-600"
                        />
                        <div
                          className="w-3 h-3 rounded-full"
                          style={{ backgroundColor: category.color }}
                        />
                        <span className="text-sm text-slate-900 dark:text-slate-100">
                          {category.name}
                        </span>
                      </label>
                    ))}
                  </div>
                </div>

                {/* –ñ–µ–ª–∞–Ω–∏—è */}
                <div className="p-4 bg-blue-50 dark:bg-blue-900/20 rounded-xl">
                  <h4 className="font-semibold text-blue-800 dark:text-blue-200 mb-3 flex items-center gap-2">
                    <span>üéØ</span> –ñ–µ–ª–∞–Ω–∏—è ({formatCurrency(amounts.wants)})
                  </h4>
                  <p className="text-sm text-blue-700 dark:text-blue-300 mb-4">
                    –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
                  </p>
                  <div className="space-y-2">
                    {expenseCategories.map(category => (
                      <label key={`wants-${category.id}`} className="flex items-center gap-2 cursor-pointer">
                        <input
                          type="radio"
                          name={`category-${category.id}`}
                          checked={categoryAssignments[category.id] === 'wants'}
                          onChange={() => assignCategoryToGroup(category.id, 'wants')}
                          className="text-blue-600"
                        />
                        <div
                          className="w-3 h-3 rounded-full"
                          style={{ backgroundColor: category.color }}
                        />
                        <span className="text-sm text-slate-900 dark:text-slate-100">
                          {category.name}
                        </span>
                      </label>
                    ))}
                  </div>
                </div>

                {/* –°–±–µ—Ä–µ–∂–µ–Ω–∏—è */}
                <div className="p-4 bg-purple-50 dark:bg-purple-900/20 rounded-xl">
                  <h4 className="font-semibold text-purple-800 dark:text-purple-200 mb-3 flex items-center gap-2">
                    <span>üí∞</span> –°–±–µ—Ä–µ–∂–µ–Ω–∏—è ({formatCurrency(amounts.savings)})
                  </h4>
                  <p className="text-sm text-purple-700 dark:text-purple-300 mb-4">
                    –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
                  </p>
                  <div className="space-y-2">
                    {expenseCategories.map(category => (
                      <label key={`savings-${category.id}`} className="flex items-center gap-2 cursor-pointer">
                        <input
                          type="radio"
                          name={`category-${category.id}`}
                          checked={categoryAssignments[category.id] === 'savings'}
                          onChange={() => assignCategoryToGroup(category.id, 'savings')}
                          className="text-purple-600"
                        />
                        <div
                          className="w-3 h-3 rounded-full"
                          style={{ backgroundColor: category.color }}
                        />
                        <span className="text-sm text-slate-900 dark:text-slate-100">
                          {category.name}
                        </span>
                      </label>
                    ))}
                  </div>
                </div>
              </div>
            )}

            <div className="flex justify-between">
              <Button variant="secondary" onClick={() => setStep(2)}>
                <ArrowLeft size={16} className="mr-2" /> –ù–∞–∑–∞–¥
              </Button>
              <div className="flex gap-2">
                <Button variant="secondary" onClick={onClose}>
                  –û—Ç–º–µ–Ω–∞
                </Button>
                <Button 
                  onClick={handleComplete}
                  disabled={expenseCategories.length === 0 || Object.keys(categoryAssignments).length === 0}
                >
                  –°–æ–∑–¥–∞—Ç—å –±—é–¥–∂–µ—Ç
                </Button>
              </div>
            </div>
          </div>
        </Card>
      )}
    </div>
  );
}