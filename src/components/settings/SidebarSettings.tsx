import React from 'react';
import { Eye, EyeOff } from 'lucide-react';

interface SidebarTab {
  id: string;
  label: string;
  icon: string;
  required: boolean;
}

interface SidebarSettingsProps {
  sidebarTabs: Record<string, boolean>;
  onUpdateTabs: (updates: Record<string, boolean>) => void;
}

const SIDEBAR_TABS: SidebarTab[] = [
  { id: 'dashboard', label: '–ì–ª–∞–≤–Ω–∞—è', icon: 'üè†', required: true },
  { id: 'transactions', label: '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', icon: 'üí≥', required: false },
  { id: 'filters', label: '–§–∏–ª—å—Ç—Ä—ã', icon: 'üîç', required: false },
  { id: 'budget', label: '–ë—é–¥–∂–µ—Ç', icon: 'üéØ', required: false },
  { id: 'goals', label: '–¶–µ–ª–∏', icon: 'üèÜ', required: false },
  { id: 'recurring', label: '–†–µ–≥—É–ª—è—Ä–Ω—ã–µ', icon: 'üîÑ', required: false },
  { id: 'analytics', label: '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞', icon: 'üìä', required: false },
  { id: 'calendar', label: '–ö–∞–ª–µ–Ω–¥–∞—Ä—å', icon: 'üìÖ', required: false },
  { id: 'categories', label: '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏', icon: 'üè∑Ô∏è', required: false },
  { id: 'calculator', label: '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä', icon: 'üßÆ', required: false },
  { id: 'import-export', label: '–ò–º–ø–æ—Ä—Ç/–≠–∫—Å–ø–æ—Ä—Ç', icon: 'üì§', required: false },
  { id: 'faq', label: '–ß–∞–í–æ', icon: '‚ùì', required: false },
  { id: 'settings', label: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', icon: '‚öôÔ∏è', required: true },
];

export function SidebarSettings({ sidebarTabs, onUpdateTabs }: SidebarSettingsProps) {
  const getVisibleTabsCount = () => {
    return Object.values(sidebarTabs).filter(Boolean).length;
  };

  const getHiddenTabsCount = () => {
    return SIDEBAR_TABS.length - getVisibleTabsCount();
  };

  const handleTabToggle = (tabId: string, checked: boolean) => {
    onUpdateTabs({ [tabId]: checked });
  };

  return (
    <div className="space-y-6">
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="p-4 bg-blue-50 dark:bg-blue-900/20 rounded-xl">
        <div className="text-sm text-blue-800 dark:text-blue-200">
          <strong>–í–∏–¥–∏–º—ã—Ö –≤–∫–ª–∞–¥–æ–∫:</strong> {getVisibleTabsCount()} –∏–∑ {SIDEBAR_TABS.length}
        </div>
        <div className="text-xs text-blue-700 dark:text-blue-300 mt-1">
          –í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–∏–µ –≤–∫–ª–∞–¥–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤ –±–æ–∫–æ–≤–æ–º –º–µ–Ω—é
        </div>
      </div>

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∫—Ä—ã—Ç—ã—Ö –≤–∫–ª–∞–¥–∫–∞—Ö */}
      {getHiddenTabsCount() > 0 && (
        <div className="p-3 bg-slate-50 dark:bg-slate-800 rounded-xl border border-slate-200 dark:border-slate-700">
          <div className="text-sm text-slate-700 dark:text-slate-300">
            <strong>–°–∫—Ä—ã—Ç–æ –≤–∫–ª–∞–¥–æ–∫:</strong> {getHiddenTabsCount()}
          </div>
          <div className="text-xs text-slate-600 dark:text-slate-400 mt-1">
            –°–∫—Ä—ã—Ç—ã–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –±–æ–∫–æ–≤–æ–º –º–µ–Ω—é, –Ω–æ –æ—Å—Ç–∞—é—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏
          </div>
        </div>
      )}

      <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
        {SIDEBAR_TABS.map(tab => (
          <label 
            key={tab.id} 
            className={`
              flex items-center justify-between p-4 rounded-xl transition-all duration-200 cursor-pointer
              ${sidebarTabs[tab.id]
                ? 'bg-green-50 dark:bg-green-900/20 border-2 border-green-200 dark:border-green-800'
                : 'bg-slate-50 dark:bg-slate-800 border-2 border-transparent hover:bg-slate-100 dark:hover:bg-slate-700'
              }
              ${tab.required ? 'opacity-75' : ''}
            `}
          >
            <div className="flex items-center gap-3">
              <span className="text-lg">{tab.icon}</span>
              <div>
                <div className="font-medium text-slate-900 dark:text-slate-100">
                  {tab.label}
                </div>
                {tab.required && (
                  <div className="text-xs text-slate-500 dark:text-slate-400">
                    –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞
                  </div>
                )}
              </div>
            </div>
            
            <div className="flex items-center gap-2">
              {sidebarTabs[tab.id] ? (
                <Eye className="text-green-600 dark:text-green-400" size={16} />
              ) : (
                <EyeOff className="text-slate-400" size={16} />
              )}
              
              <input
                type="checkbox"
                checked={sidebarTabs[tab.id]}
                onChange={(e) => {
                  if (!tab.required) {
                    handleTabToggle(tab.id, e.target.checked);
                  }
                }}
                disabled={tab.required}
                className="rounded"
              />
            </div>
          </label>
        ))}
      </div>

      <div className="p-3 bg-blue-50 dark:bg-blue-900/20 rounded-xl">
        <div className="text-sm text-blue-800 dark:text-blue-200">
          <strong>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</strong> –í–∫–ª–∞–¥–∫–∏ "–ì–ª–∞–≤–Ω–∞—è" –∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º—ã –∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–∫—Ä—ã—Ç—ã.
        </div>
      </div>
    </div>
  );
}